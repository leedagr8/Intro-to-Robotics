#include "Romi_Motor_Power.h"
#include "Encoder.h"

/* Defines pin configuration of robot */
#include "Robot_Pins_v2.h"

/*
 * Robot Encoder Library Example
 * 
 * Summary:
 * For this part of the lab the car will drive around a square 3 times. Using Dr. Rhoades example we were able to implement this
 *
 * Parts Info:
 * o Romi Encoder Pair Kit, 12 CPR, 3.5-18V - https://www.pololu.com/product/3542
 * o Pololu Wheel 70Ã—8mm Pair - https://www.pololu.com/product/1429
 *
 * The following Encoder specific functions will be used:
 * o setupEncoder - Used to initialize the encoder pins and enable encoder pulse counting
 * o countForDistance - Determine how many pulses required to travel a certain distance (in inches)
 * o resetLeftEncoderCnt - Reset encoder count to zero for the left wheel
 * o resetRightEncoderCnt - Reset encoder count to zero for the right wheel
 * o getEncoderRightCnt - Get the current encoder count for the right wheel
 *
 * created 17 April 2019
 * by Franklin S. Cooper Jr.
 */
 
Romi_Motor_Power left_motor;
Romi_Motor_Power right_motor;

/* Diameter of Romi wheels in inches */
#define WHEEL_DIAMETER 2.7559055

/* Number of encoder (rising) pulses every time the wheel turns completely */
#define CNT_PER_REVOLUTION 360

/* How far in inches for the robot to travel */
#define INCHES_TO_TRAVEL 39.4 //1 meter

void setup() {
  left_motor.begin(MOTOR_L_SLP_PIN,
           MOTOR_L_DIR_PIN,
           MOTOR_L_PWM_PIN);
  right_motor.begin(MOTOR_R_SLP_PIN,
          MOTOR_R_DIR_PIN,
          MOTOR_R_PWM_PIN);

  /* Enable Encoders */
  setupEncoder(ENCODER_ELA_PIN,
           ENCODER_ELB_PIN,
         ENCODER_ERA_PIN,
         ENCODER_ERB_PIN);

  /* Right button on Launchpad */
  pinMode(PUSH2, INPUT_PULLUP);
}

void loop() {
  uint16_t slow_down  = 0; // How many encoder pulses before starting to slow down
  uint16_t total_count = 0; // Total amount of encoder pulses received
  uint8_t default_speed = 100; // Default raw pwm speed for motor.

  uint8_t left_wheel_speed = default_speed;
  uint8_t right_wheel_speed = default_speed;

  /* Amount of encoder pulses needed to achieve distance */
  uint16_t x = countForDistance(WHEEL_DIAMETER, CNT_PER_REVOLUTION, INCHES_TO_TRAVEL);

  /* counter for while loop 8/
  int i =0;

  /* There are no brakes on this motor. Therefore, momentum will cause the
   * motor to rotate more then necessary. To combat this reduce the speed
   * of the wheels significantly once its close to its destination.
   */
  if(left_wheel_speed > 50)
      slow_down = x-CNT_PER_REVOLUTION*.20;
  else
    slow_down = x;

  /* Wait until button is pressed to start robot */
  while(digitalRead(PUSH2));

  delay(2000);

  /* Set the encoder pulses count back to zero */
  resetLeftEncoderCnt();
  resetRightEncoderCnt();

  /* "Turn on" the motor */
  left_motor.enableMotor();
  right_motor.enableMotor();

  /*while car has not completed 3 squares. Each 'i' represents 1 meter*/
  while(i<12){

  /* Set motor speed */
  left_motor.setSpeedRaw(100);
  right_motor.setSpeedRaw(99); //Right wheel was a bit faster than left wheel

  /* Cause the robot to drive forward */
  left_motor.directionForward();
  right_motor.directionForward();

  /* Drive motor until it has received x pulses */
  while(total_count <= x && i < 12)
  {
    total_count = getEncoderRightCnt();

    /* Getting close to the end. Slow down */
    if(total_count >= slow_down && i <12) {
      left_motor.setSpeedRaw(00);
      right_motor.setSpeedRaw(60);

      
    }
  }


      //Car will turn at a 90 degree angle
      delay(1100);
      
      //Reset your right encoder count
      resetRightEncoderCnt();
      //Reset your count
      total_count = 0;
      //Increment 'i'
      i++;
 
}
  /* Halt motors */
  left_motor.disableMotor();
  right_motor.disableMotor();
}
