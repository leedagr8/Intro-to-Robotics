// Written by Leon Johnson 4-17-19

/* Purpose of this lab: Drive the car in a straight line and stop it when the ultrasonic sensors reads a value of .5 meters or less */


#include "Energia.h"

#include "Romi_Motor_Power.h"

/* Defines pin configuration of robot */
#include "Robot_Pins_v2.h"

Romi_Motor_Power left_motor;
Romi_Motor_Power right_motor;

const int trigPin = 32;           //connects to the trigger pin on the distance sensor       
const int echoPin = 33;           //connects to the echo pin on the distance sensor      

float distance = 0;               //stores the distance measured by the distance sensor

void setup()
{
  Serial.begin (9600);        //set up a serial connection with the computer

  pinMode(trigPin, OUTPUT);   //the trigger pin will output pulses of electricity 
  pinMode(echoPin, INPUT);    //the echo pin will measure the duration of pulses coming back from the distance sensor

  left_motor.begin(MOTOR_L_SLP_PIN,
                   MOTOR_L_DIR_PIN,
                   MOTOR_L_PWM_PIN);
  right_motor.begin(MOTOR_R_SLP_PIN,
                    MOTOR_R_DIR_PIN,
                    MOTOR_R_PWM_PIN);

}

void loop() {
  distance = getDistance();   //variable to store the distance measured by the sensor

  Serial.print(distance);     //print the distance that was measured
  Serial.println(" in");      //print units after the distance


  delay(50);      //delay 50ms between each reading

   // Enable both motors
    left_motor.enableMotor();
    right_motor.enableMotor();

    // Set motor to 30% of its max speed
    left_motor.setSpeed(30);
    right_motor.setSpeed(30);

    if(distance > 19.6){
    //Drive forward

    left_motor.directionForward();
    right_motor.directionForward();
    }
    else {
    //Else stop motors

    left_motor.disableMotor();
    right_motor.disableMotor();
    }
}

//------------------FUNCTIONS-------------------------------

//RETURNS THE DISTANCE MEASURED BY THE HC-SR04 DISTANCE SENSOR
float getDistance()
{
  float echoTime;                   //variable to store the time it takes for a ping to bounce off an object
  float calculatedDistance;         //variable to store the distance calculated from the echo time

  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); 
  digitalWrite(trigPin, LOW);

  echoTime = pulseIn(echoPin, HIGH);      //use the pulsein command to see how long it takes for the
                                          //pulse to bounce back to the sensor

  calculatedDistance = echoTime / 148.0;  //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound)

  return calculatedDistance;              //send back the distance that was calculated
}
